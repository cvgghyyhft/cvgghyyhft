import com.alibaba.fastjson.JSONObject;
import org.example.Pojo.Result;
import org.example.Utilities.JWT;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;
 
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
 
@Component
public class MyInterceptor implements HandlerInterceptor {
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
 
        System.out.println("Interceptor 拦截之前执行的代码");
        //先获取请求路径
        String url = request.getRequestURI();
 
        //这里不需要判断是否是/login，因为在注册拦截器之前就已经设置将/login请求不需要拦截了
/*        if (url.contains("login")){
            return true;
        }*/
 
 
        //直接来判断是否请求头中有 token 字段
        String jwt = request.getHeader("token");
 
        if(jwt == null || jwt.equals("") ){
            //直接返回错误信息
            Result result = Result.error("error");
            String js = JSONObject.toJSONString(result);
            response.getWriter().write(js);
            return false;
        }
 
        //存在 JWT 令牌时，就需要判断是否正确
        //如果出现异常，那么令牌不正确
        try {
            JWT.parse(jwt);
        } catch (Exception e) {
            Result result = Result.error("error");
            String js = JSONObject.toJSONString(result);
            response.getWriter().write(js);
            return false;
        }
 
        //令牌校验正确的，返回 true
            return true;
    }
 
    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        System.out.println("Interceptor 访问完资源后，执行的方法!!!!!");
    }
 
    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
        System.out.println("Interceptor 最后执行的方法!!!!");
    }
 
}
